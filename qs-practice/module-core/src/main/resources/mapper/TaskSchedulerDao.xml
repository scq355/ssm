<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="taskSchedulerDao">
  <resultMap id="taskScheduler" type="com.qs.p2p.model.TaskScheduler">
	<result property="id" column="id" />
	<result property="moduleName" column="module_name" />
	<result property="hostname" column="hostname" />
	<result property="ipAddress" column="ip_address" />
	<result property="enabled" column="enabled" />
	<result property="createdAt" column="created_at" />
	<result property="updatedAt" column="updated_at" />
  </resultMap>

  <sql id="sql_insert_column_list">
	<trim prefix="" prefixOverrides=",">
	  <if test="entity.id != null">,id</if>
	  <if test="entity.moduleName != null and entity.moduleName != ''">,module_name</if>
	  <if test="entity.hostname != null and entity.hostname != ''">,hostname</if>
	  <if test="entity.ipAddress != null and entity.ipAddress != ''">,ip_address</if>
	  <if test="entity.enabled != null">,enabled</if>
	  <if test="entity.createdAt != null">,created_at</if>
	  <if test="entity.createdAt == null">,created_at</if>
	  <if test="entity.updatedAt != null">,updated_at</if>
	  <if test="entity.updatedAt == null">,updated_at</if>
	</trim>
  </sql>

  <sql id="sql_insert_property_list">
	<trim prefix="" prefixOverrides=",">
	  <if test="entity.id != null">,#{entity.id}</if>
	  <if test="entity.moduleName != null and entity.moduleName != ''">,#{entity.moduleName}</if>
	  <if test="entity.hostname != null and entity.hostname != ''">,#{entity.hostname}</if>
	  <if test="entity.ipAddress != null and entity.ipAddress != ''">,#{entity.ipAddress}</if>
	  <if test="entity.enabled != null">,#{entity.enabled}</if>
	  <if test="entity.createdAt != null">,#{entity.createdAt}</if>
	  <if test="entity.createdAt == null">,NOW()</if>
	  <if test="entity.updatedAt != null">,#{entity.updatedAt}</if>
	  <if test="entity.updatedAt == null">,NOW()</if>
	</trim>
  </sql>

  <sql id="sql_column_list">
	id
	,module_name
	,hostname
	,ip_address
	,enabled
	,created_at
	,updated_at
  </sql>

  <sql id="sql_update_set">
	<trim prefix="SET" prefixOverrides=",">
	  <if test="entity != null">
		<choose>
		  <when test="entity.forceUpdateProperties.contains('id')">
			,id = #{entity.id, jdbcType=INTEGER}
		  </when>
		  <otherwise>
			<if test="entity.id != null">,id = #{entity.id}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('moduleName')">
			,module_name = #{entity.moduleName, jdbcType=VARCHAR}
		  </when>
		  <otherwise>
			<if test="entity.moduleName != null and entity.moduleName != ''">,module_name = #{entity.moduleName}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('hostname')">
			,hostname = #{entity.hostname, jdbcType=VARCHAR}
		  </when>
		  <otherwise>
			<if test="entity.hostname != null and entity.hostname != ''">,hostname = #{entity.hostname}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('ipAddress')">
			,ip_address = #{entity.ipAddress, jdbcType=VARCHAR}
		  </when>
		  <otherwise>
			<if test="entity.ipAddress != null and entity.ipAddress != ''">,ip_address = #{entity.ipAddress}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('enabled')">
			,enabled = #{entity.enabled, jdbcType=INTEGER}
		  </when>
		  <otherwise>
			<if test="entity.enabled != null">,enabled = #{entity.enabled}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('createdAt')">
			,created_at = #{entity.createdAt, jdbcType=TIMESTAMP}
		  </when>
		  <otherwise>
			<if test="entity.createdAt != null">,created_at = #{entity.createdAt}</if>
		  </otherwise>
		</choose>
		<choose>
		  <when test="entity.forceUpdateProperties.contains('updatedAt')">
			,updated_at = #{entity.updatedAt, jdbcType=TIMESTAMP}
		  </when>
		  <otherwise>
			<if test="entity.updatedAt != null">,updated_at = #{entity.updatedAt}</if>
			<if test="entity.updatedAt == null">,updated_at = NOW()</if>
		  </otherwise>
		</choose>
		<if test="!entity.incrementUpdateMap.isEmpty()">
		  ,
		  <foreach collection="entity.incrementUpdateMap" index="key" item="value" separator=",">
			${key} = ${key} + #{value}
		  </foreach>
		</if>
	  </if>
	</trim>
  </sql>

  <sql id="sql_condition">
	<if test="condition != null">
	  <if test="condition.id != null">AND id = #{condition.id}</if>
	  <if test="condition.moduleName != null and condition.moduleName != ''">AND module_name = #{condition.moduleName}</if>
	  <if test="condition.hostname != null and condition.hostname != ''">AND hostname = #{condition.hostname}</if>
	  <if test="condition.ipAddress != null and condition.ipAddress != ''">AND ip_address = #{condition.ipAddress}</if>
	  <if test="condition.enabled != null">AND enabled = #{condition.enabled}</if>
	  <if test="condition.createdAt != null">AND created_at = #{condition.createdAt}</if>
	  <if test="condition.updatedAt != null">AND updated_at = #{condition.updatedAt}</if>
	  <if test="!condition.expressionChainList.empty">
		AND
		<foreach collection="condition.expressionChainList" item="expressionChain" separator="OR">
		  <if test="!expressionChain.expressionList.empty">
			<foreach collection="expressionChain.expressionList" item="expression" separator="AND">
			  <choose>
				<when test="expression.type == 0">
				  ${expression.column} ${expression.operator}
				</when>
				<when test="expression.type == 1">
				  ${expression.column} ${expression.operator} #{expression.value}
				</when>
				<when test="expression.type == 2">
				  ${expression.column} ${expression.operator} #{expression.value} AND #{expression.value1}
				</when>
				<when test="expression.type == 3">
				  ${expression.column} ${expression.operator}
				  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
					#{value}
				  </foreach>
				</when>
			  </choose>
			</foreach>
		  </if>
		</foreach>
	  </if>
	</if>
  </sql>

  <sql id="sql_pagination_start">
	<![CDATA[
  ]]>
  </sql>

  <sql id="sql_pagination_end">
	<![CDATA[
    LIMIT #{offset}, #{limit}
  ]]>
  </sql>

  <insert id="insert" parameterType="java.util.Map">
	<selectKey keyProperty="entity.id" resultType="java.lang.Integer" order="AFTER">
	  SELECT LAST_INSERT_ID()
	</selectKey>
	INSERT INTO task_scheduler (
	<include refid="sql_insert_column_list" />
	) VALUES (
	<include refid="sql_insert_property_list" />
	)
  </insert>

  <select id="get" parameterType="java.util.Map" resultMap="taskScheduler">
	SELECT
	<include refid="sql_column_list" />
	FROM task_scheduler
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
  </select>

  <select id="getById" parameterType="java.util.Map" resultMap="taskScheduler">
	SELECT
	<include refid="sql_column_list" />
	FROM task_scheduler
	WHERE id = #{id}
  </select>

  <select id="find" parameterType="java.util.Map" resultMap="taskScheduler">
	<if test="offset != null">
	  <include refid="sql_pagination_start" />
	</if>
	SELECT
	<include refid="sql_column_list" />
	FROM task_scheduler
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
	<if test="orderBy != null">
	  ORDER BY ${orderBy}
	</if>
	<if test="offset != null">
	  <include refid="sql_pagination_end" />
	</if>
  </select>

  <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT count(${count_column}) AS count_ FROM task_scheduler
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
  </select>

  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.HashMap">
	SELECT ${aggregate_sql} FROM task_scheduler
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
  </select>

  <update id="update" parameterType="java.util.Map">
	UPDATE task_scheduler
	<include refid="sql_update_set" />
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
  </update>

  <update id="updateById" parameterType="java.util.Map">
	UPDATE task_scheduler
	<include refid="sql_update_set" />
	WHERE id = #{id}
  </update>

  <delete id="remove" parameterType="java.util.Map">
	DELETE FROM task_scheduler
	<trim prefix="WHERE" prefixOverrides="AND">
	  <include refid="sql_condition" />
	</trim>
  </delete>

  <delete id="removeById" parameterType="java.util.Map">
	DELETE FROM task_scheduler
	WHERE id = #{id}
  </delete>
</mapper>